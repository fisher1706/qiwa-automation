import time

import config
from data.mock_mlsd.establishment import Establishment
from src.api.assertions.response_validator import ResponseValidator
from src.api.http_client import HTTPClient


class MockApi:
    url = config.settings.mock_mlsd_url

    def __init__(self, api=HTTPClient()):
        self.api = api

    def get_laborers_new(
        self,
        user_type,
        role="Owner",
        branches=3,
        wp_type="valid",
        saudi_count=3,
        expat_count=3,
        subscription="have-subscription",
    ):
        """
        :param expat_count: quantity of expats available in new company
        :param saudi_count: quantity of saudis available in new company
        :param branches: branches count for the user
        :param wp_type: valid, invalid, expired
        :param user_type: saudi, expat, border
        :param role: Owner, EstablishmentUser, EstablishmentManager, Employee
        :param subscription: have-subscription, self-pending, invite-pending
        :return: account 'laborer_id' that can be registered to Qiwa
        """
        params = (
            f"?e-count=1"
            f"&wp={wp_type}"
            f"&mobile-auth=true"
            f"&saudi-count={saudi_count}"
            f"&expat-count={expat_count}"
            f"&nitaq-color=any"
            f"&branches={branches}"
            f"&subscription={subscription}"
        )

        response = self.api.get(self.url, endpoint=f"/laborers/new/{user_type}/{role}{params}")
        ResponseValidator(response).check_status_code(name="Get mock Laborer ID", expect_code=200)
        laborer_id_no = response.json()["laborer_id_no"]
        return laborer_id_no

    def post_establishments_new(self, est: Establishment = Establishment()):
        payload = est.dict(exclude_none=True, by_alias=True)
        response = self.api.post(self.url, endpoint="/establishments/new", json=payload)
        ResponseValidator(response).check_status_code(name="Create establishment", expect_code=200)
        json = response.json()
        return json

    def get_mock_sms_code(self, phone_number):
        # Workaround to wait until a valid code will be generated by Qiwa
        time.sleep(2)
        assert (
            len(phone_number) == 12
        ), f"Phone number size is {len(phone_number)} but should be 12: {phone_number}"
        final_endpoint = f"/pass-code/{phone_number}"
        response = self.api.get(url=config.settings.mock_unifonic_url, endpoint=final_endpoint)
        ResponseValidator(response).check_status_code(name="Get mock SMS code", expect_code=200)
        pass_code = response.json()["passCode"]
        assert pass_code != {
            "default": None
        }, f"Received passCode for phone number {phone_number} is {pass_code}"
        return pass_code

    def get_establishment_laborers(self, sequence_number, expect_code=200):
        response = self.api.get(self.url, endpoint=f"/establishments/laborers/{sequence_number}")
        ResponseValidator(response).check_status_code(
            name=f"GET /establishments/laborers/{sequence_number}", expect_code=expect_code
        )
        return response.json()
